[{"/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/index.js":"1","/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/statefull.js":"2","/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/reportWebVitals.js":"3","/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/components.js":"4","/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/ComponentsStateless.js":"5"},{"size":506,"mtime":1613662743431,"results":"6","hashOfConfig":"7"},{"size":2797,"mtime":1613909771316,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1613576681816,"results":"9","hashOfConfig":"7"},{"size":7131,"mtime":1614011044434,"results":"10","hashOfConfig":"7"},{"size":2480,"mtime":1613898871726,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1vu5uhh",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/index.js",[],["26","27"],"/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/statefull.js",[],"/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/reportWebVitals.js",[],"/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/components.js",["28"],"import React, { useState, useEffect, Component } from \"react\";\nimport { SimpleCanvas, SimpleGallery, TodoItem2 } from \"./ComponentsStateless\";\n// class Counter extends Component {\n//   state = { count: 0 };\n//   render() {\n//     return (\n//       <div>\n//         <h3>{this.state.count}</h3>\n//         <button\n//           onClick={() => {\n//             this.setState({ count: this.state.count - 1 });\n//           }}\n//         >\n//           -\n//         </button>\n//         <button\n//           onClick={() => {\n//             this.setState({ count: this.state.count + 1 });\n//           }}\n//         >\n//           +\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <h3>{count}</h3>\n      <button\n        onClick={() => {\n          setCount(count - 1);\n        }}\n      >\n        -\n      </button>\n      <button\n        onClick={() => {\n          setCount((count) => count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n// class Gallery extends Component {\n//   state = { images: [\"https://i.ytimg.com/vi/MCn9lL94sxQ/maxresdefault.jpg\"] };\n//   render() {\n//     return (\n//       <div>\n//         <SimpleGallery images={this.state.images}></SimpleGallery>\n//         <button\n//           onClick={() => {\n//             let src = prompt(\"src\");\n//             const imagesNew = [...this.state.images];\n//             imagesNew.push(src);\n//             this.setState({ images: imagesNew });\n//           }}\n//         >\n//           Add{\" \"}\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\nfunction Gallery(props) {\n  const [images, setImages] = useState([\n    \"https://i.ytimg.com/vi/MCn9lL94sxQ/maxresdefault.jpg\",\n  ]);\n  const [numImages, setNumImages] = useState(images.length);\n\n  useEffect(() => {\n    function foo(word) {\n      console.log(word);\n    }\n    foo(\"hi \");\n    return () => {\n      foo(\"bye \");\n    };\n  }, [numImages]);\n\n  const handleClick = () => {\n    let src = prompt(\"new img src\");\n    const imagesNew = [...images, src];\n    setImages((prev) => imagesNew);\n    setNumImages((prevNumImages) => prevNumImages + 1);\n  };\n  return (\n    <div>\n      <h1\n        onClick={() => {\n          setNumImages((prev) => prev + 1);\n        }}\n      >\n        {numImages}\n      </h1>\n      <SimpleGallery images={images}></SimpleGallery>\n      <button onClick={handleClick}>Add </button>\n    </div>\n  );\n}\nclass Canvasv2 extends Component {\n  cycleColors = [\"red\", \"yellow\", \"blue\", \"orange\"];\n  cycleData = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  state = {\n    data: [\n      [\"red\", \"white\", \"gray\", \"orange\"],\n      [\"green\", \"yellow\", \"gray\", \"purple\"],\n      [\"red\", \"white\", \"yellow\", \"green\"],\n      [\"red\", \"green\", \"gray\", \"purple\"],\n    ],\n  };\n  render() {\n    return (\n      <div className=\"simple-canvas \">\n        {this.state.data.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((color, colIndex) => (\n              <div\n                key={colIndex}\n                className=\"cell\"\n                style={{ backgroundColor: color }}\n                onClick={() => {\n                  const newData = JSON.parse(JSON.stringify(this.state.data)); // deepcopy\n                  newData[rowIndex][colIndex] = this.cycleColors[\n                    this.cycleData[rowIndex][colIndex]\n                  ]; // update color\n                  this.cycleData[rowIndex][colIndex] =\n                    (this.cycleData[rowIndex][colIndex] + 1) %\n                    this.cycleColors.length;\n                  this.setState({ data: newData });\n                }}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nclass TodoApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        { title: \"wash dishes\", done: false },\n        { title: \"learn react\", done: true },\n      ],\n      input: \"\",\n      searchInput: \"\",\n      filterValue: this.filterEnum.all,\n    };\n  }\n  filterEnum = Object.freeze({\n    completed: \"completed\",\n    incompleted: \"incompleted\",\n    all: \"all\",\n  });\n  handleAddition = (todo) => {\n    const newTodos = [{ title: todo, done: false }, ...this.state.todos];\n    this.setState({ todos: newTodos });\n  };\n  handleDelete = (toDeleteObj) => {\n    this.setState({\n      todos: this.state.todos.filter((todo) => todo !== toDeleteObj),\n    });\n  };\n  handleToggleFinishedTask = (toggledObject) => {\n    this.setState({\n      todos: this.state.todos.map((todo, index) => {\n        return {\n          title: todo.title,\n          done: todo === toggledObject ? !todo.done : todo.done,\n        };\n      }),\n    });\n  };\n  filterByStatusPredicate = (item) => {\n    if (this.state.filterValue === this.filterEnum.all) {\n      return true;\n    }\n    if (this.state.filterValue === this.filterEnum.incompleted) {\n      return !item.done;\n    }\n    if (this.state.filterValue === this.filterEnum.completed) {\n      return item.done;\n    }\n  };\n\n  handleChangeOnSearch = (e) => {\n    this.setState({ searchInput: e.target.value });\n  };\n  render() {\n    return (\n      <div className=\"todo-app\">\n        <div className=\"search-bar\">\n          {\" \"}\n          <label> search: </label>\n          <input\n            className=\"search-input\"\n            value={this.state.searchInput}\n            onChange={this.handleChangeOnSearch}\n          ></input>\n        </div>\n        <div className=\"filter-bar\">\n          <label>filter:</label>\n          <select\n            value={this.state.filterValue}\n            onChange={(e) => {\n              this.setState({ filterValue: e.target.value });\n            }}\n          >\n            {[\n              this.filterEnum.all,\n              this.filterEnum.completed,\n              this.filterEnum.incompleted,\n            ].map((val, index) => (\n              <option key={index}>{val}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"todo-items\">\n          {this.state.todos.filter(this.filterByStatusPredicate).map(\n            (item, index) =>\n              item.title.includes(this.state.searchInput) && (\n                <TodoItem2\n                  key={index}\n                  onClick={() => this.handleToggleFinishedTask(item)}\n                  title={item.title}\n                  completed={item.done}\n                  onRemove={() => {\n                    this.handleDelete(item);\n                  }}\n                ></TodoItem2>\n              )\n          )}\n        </div>\n\n        <div className=\"addition-bar\">\n          {\" \"}\n          <input\n            value={this.state.input}\n            onChange={(e) => {\n              this.setState({ input: e.target.value });\n            }}\n          ></input>\n          <button\n            className=\"add\"\n            onClick={() => {\n              this.handleAddition(this.state.input);\n            }}\n          >\n            Add{\" \"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Counter, Gallery, Canvasv2, TodoApp };\n","/Users/tamiro/Desktop/wix training/react/statelessStatefull/my-appp/src/ComponentsStateless.js",["29","30"],"const Title = (props) => {\n  return <h1>{props.text}</h1>;\n};\n\nconst Heading = (props) => {\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <h2>{props.subtitle}</h2>\n    </div>\n  );\n};\n\nconst ImageView = (props) => {\n  return (\n    <figure>\n      <img src={props.src} />\n      <figcaption>{props.caption}</figcaption>\n    </figure>\n  );\n};\n\nconst SimpleGallery = (props) => {\n  return (\n    <div>\n      {props.images.map((src, index) => (\n        <img key={index} src={src}></img>\n      ))}\n    </div>\n  );\n};\n\nconst TodoItem = (props) => {\n  return (\n    <p\n      onClick={props.onClick}\n      style={{ textDecoration: props.done ? \"line-through\" : \"\" }}\n    >\n      {props.title}\n    </p>\n  );\n};\n\nconst SimpleCanvas = (props) => {\n  return (\n    <div className=\"simple-canvas \">\n      {props.data.map((row) => (\n        <div className=\"row\">\n          {row.map((color) => (\n            <div className=\"cell\" style={{ backgroundColor: color }}></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\nconst SpecialButton = (props) => (\n  <button\n    onClick={(e) => {\n      if (e.ctrlKey || e.metaKey) {\n        props.onSpecialClick();\n      } else {\n        props.onClick();\n      }\n    }}\n  >\n    {props.children}\n  </button>\n);\n\nconst TodoItem2 = (props) => (\n  <div className=\"todo-2\">\n    {\" \"}\n    <TodoItem\n      onClick={props.onClick}\n      done={props.completed}\n      title={props.title}\n    />\n    <SpecialButton\n      onClick={() => {\n        if (window.confirm(\"are u sure?\")) {\n          props.onRemove();\n        }\n      }}\n      onSpecialClick={props.onRemove}\n    >\n      🗑\n    </SpecialButton>\n  </div>\n);\n\nconst SimpleCanvas2 = (props) => {\n  return (\n    <div className=\"simple-canvas \">\n      {props.data.map((row, rowIndex) => (\n        <div className=\"row\">\n          {row.map((color, colIndex) => (\n            <div\n              className=\"cell\"\n              style={{ backgroundColor: color }}\n              onClick={() => {\n                props.onCellClick(rowIndex, colIndex, color);\n              }}\n            ></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst TodoApp = (props) =>\n  props.items.map((item, index) => (\n    <TodoItem2\n      title={item.title}\n      completed={item.done}\n      onRemove={() => props.onRemove(index)}\n    ></TodoItem2>\n  ));\nexport {\n  Title,\n  Heading,\n  ImageView,\n  SimpleGallery,\n  TodoItem,\n  SimpleCanvas,\n  SpecialButton,\n  TodoItem2,\n  SimpleCanvas2,\n  TodoApp,\n};\n",["31","32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":10,"nodeType":"39","messageId":"40","endLine":2,"endColumn":22},{"ruleId":"41","severity":1,"message":"42","line":17,"column":7,"nodeType":"43","endLine":17,"endColumn":30},{"ruleId":"41","severity":1,"message":"42","line":27,"column":9,"nodeType":"43","endLine":27,"endColumn":36},{"ruleId":"33","replacedBy":"44"},{"ruleId":"35","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'SimpleCanvas' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["46"],["47"],"no-global-assign","no-unsafe-negation"]